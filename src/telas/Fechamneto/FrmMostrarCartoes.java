/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package telas.Fechamneto;

import Interface.FechamentoTableModel;
import Regras.Formatacao;
import java.awt.Image;
import java.awt.Toolkit;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableCellRenderer;
import model.Formapagamento;
import negocios.SituacaoFechamento;

/**
 *
 * @author wolverine
 */
public class FrmMostrarCartoes extends javax.swing.JFrame {
    
    private List<SituacaoFechamento> listaCielo;
    private List<SituacaoFechamento> listaRedCard;
    
    private FechamentoTableModel cieloModel;
    private FechamentoTableModel redCardModel;
    
    List<Formapagamento> listaCieloVendas;
    List<Formapagamento> listaRedCardVendas;
    List<Formapagamento> listaCieloContas;
    List<Formapagamento> listaRedCardContas;
    private int contaCartao;

    /**
     * Creates new form FrmMostrarCartoes
     */
    public FrmMostrarCartoes() {
        initComponents();
        URL url = this.getClass().getResource("/imagens/logo_mini.png");
        Image imagemTitulo = Toolkit.getDefaultToolkit().getImage(url);
        this.setIconImage(imagemTitulo);
        this.setLocationRelativeTo(null);
        gerarMostrarCartoes();
        gerarJTableSituacaoCielo();
        gerarJTableSituacaoRedCard();
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        cielojTable = new javax.swing.JTable();
        cielojLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        redCardjTable = new javax.swing.JTable();
        redCardjLabel = new javax.swing.JLabel();
        totalRedCardjLabel = new javax.swing.JLabel();
        totalCielojLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Conferência de Cartões");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        cielojTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Descrição", "Valor R$"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(cielojTable);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cielojLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        cielojLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cielojLabel.setText("Cielo");

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        redCardjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Descrição", "Valor R$"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(redCardjTable);

        redCardjLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        redCardjLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        redCardjLabel.setText("Red Card");

        totalRedCardjLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        totalRedCardjLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        totalRedCardjLabel.setText("0,00");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(totalRedCardjLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(redCardjLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(redCardjLabel)
                .addGap(1, 1, 1)
                .addComponent(totalRedCardjLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        totalCielojLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        totalCielojLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        totalCielojLabel.setText("0,00");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cielojLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalCielojLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(316, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(cielojLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalCielojLabel))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/door_in.png"))); // NOI18N
        jButton1.setText("Fechar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(278, 278, 278)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel cielojLabel;
    private javax.swing.JTable cielojTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel redCardjLabel;
    private javax.swing.JTable redCardjTable;
    private javax.swing.JLabel totalCielojLabel;
    private javax.swing.JLabel totalRedCardjLabel;
    // End of variables declaration//GEN-END:variables

 public void gerarJTableSituacaoCielo(){
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.RIGHT);  
        cieloModel = new FechamentoTableModel(listaCielo);
        cielojTable.setModel(cieloModel);
        cielojTable.getColumnModel().getColumn(0).setPreferredWidth(50);
        cielojTable.getColumnModel().getColumn(1).setCellRenderer(renderer);
        cielojTable.getColumnModel().getColumn(1).setPreferredWidth(20);
        cielojTable.repaint();
    }
 
 public void gerarJTableSituacaoRedCard(){
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.RIGHT);  
        redCardModel = new FechamentoTableModel(listaRedCard);
        redCardjTable.setModel(redCardModel);
        redCardjTable.getColumnModel().getColumn(0).setPreferredWidth(50);
        redCardjTable.getColumnModel().getColumn(1).setCellRenderer(renderer);
        redCardjTable.getColumnModel().getColumn(1).setPreferredWidth(20);
        redCardjTable.repaint();
    }
 
 public void gerarMostrarCartoes(){
        List<Formapagamento> listaCielo = new ArrayList<Formapagamento>();
        List<Formapagamento> listaRedCard = new ArrayList<Formapagamento>();
        
        //carregar Lista Cielo Vendas
        if (listaCieloVendas!=null){
            for(int i=0;i<listaCieloVendas.size();i++){
                boolean achou = false;
                for(int j=0;j<listaCielo.size();j++){
                    int cielo = listaCielo.get(j).getIdformaPagamento();
                    int cieloVendas = listaCieloVendas.get(i).getIdformaPagamento();
                    if (cieloVendas==cielo){
                        achou = true;
                        listaCielo.get(j).setValor(listaCielo.get(j).getValor() + listaCieloVendas.get(i).getValor());
                        j=1000;
                    }
                }
                if (!achou){
                    Formapagamento fp = new Formapagamento();
                    fp.setIdformaPagamento(listaCieloVendas.get(i).getIdformaPagamento());
                    fp.setValor(listaCieloVendas.get(i).getValor());
                    fp.setDescricao(listaCieloVendas.get(i).getDescricao());
                    listaCielo.add(fp);
                }
            }
        }
        
        
        //carregar Lista Cielo Contas
        if (listaCieloContas!=null){
            for(int i=0;i<listaCieloContas.size();i++){
                boolean achou = false;
                for(int j=0;j<listaCielo.size();j++){
                    int cielo = listaCielo.get(j).getIdformaPagamento();
                    int cieloConta = listaCieloContas.get(i).getIdformaPagamento();
                    if (cieloConta==cielo){
                        achou = true;
                        listaCielo.get(j).setValor(listaCielo.get(j).getValor() + listaCieloContas.get(i).getValor());
                        j=1000;
                    }
                }
                if (!achou){
                    Formapagamento fp = new Formapagamento();
                    fp.setIdformaPagamento(listaCieloContas.get(i).getIdformaPagamento());
                    fp.setValor(listaCieloContas.get(i).getValor());
                    fp.setDescricao(listaCieloContas.get(i).getDescricao());
                    listaCielo.add(fp);
                }
            }
        }
        
        
        //carregar Lista Red Card Vendas
        if (listaRedCardVendas!=null){
            for(int i=0;i<listaRedCardVendas.size();i++){
                boolean achou = false;
                for(int j=0;j<listaRedCard.size();j++){
                    int redCard = listaRedCard.get(j).getIdformaPagamento();
                    int redCardVendas = listaRedCardVendas.get(i).getIdformaPagamento();
                    if (redCardVendas==redCard){
                        achou = true;
                        listaRedCard.get(j).setValor(listaRedCard.get(j).getValor() + listaRedCardVendas.get(i).getValor());
                        j=1000;
                    }
                }
                if (!achou){
                    Formapagamento fp = new Formapagamento();
                    fp.setIdformaPagamento(listaRedCardVendas.get(i).getIdformaPagamento());
                    fp.setValor(listaRedCardVendas.get(i).getValor());
                    fp.setDescricao(listaRedCardVendas.get(i).getDescricao());
                    listaRedCard.add(fp);
                }
            }
        }
        
        
        //carregar Lista Red Card Contas
        if (listaRedCardContas!=null){
            for(int i=0;i<listaRedCardContas.size();i++){
                boolean achou = false;
                for(int j=0;j<listaRedCard.size();j++){
                    int redCard = listaRedCard.get(j).getIdformaPagamento();
                    int redCardContas = listaRedCardContas.get(i).getIdformaPagamento();
                    if (redCardContas==redCard){
                        achou = true;
                        listaRedCard.get(j).setValor(listaRedCard.get(j).getValor() + listaRedCardContas.get(i).getValor());
                        j=1000;
                    }
                }
                if (!achou){
                    Formapagamento fp = new Formapagamento();
                    fp.setIdformaPagamento(listaRedCardContas.get(i).getIdformaPagamento());
                    fp.setValor(listaRedCardContas.get(i).getValor());
                    fp.setDescricao(listaRedCardContas.get(i).getDescricao());
                    listaRedCard.add(fp);
                }
            }
        }
        gerarSituacaoFechamentoCartoes(listaCielo, listaRedCard);
        
    }
 
 public void gerarSituacaoFechamentoCartoes(List<Formapagamento> listaCielo, List<Formapagamento> listaRedCard){
        List<SituacaoFechamento> listaSituacaoCielo = new ArrayList<SituacaoFechamento>();
        List<SituacaoFechamento> listaSituacaoRedCard = new ArrayList<SituacaoFechamento>();
        float totalCielo =0;
        float totalRedCard= 0;
        for(int i=0;i<listaCielo.size();i++){
            SituacaoFechamento situacao = new SituacaoFechamento();
            situacao.setDescricao(listaCielo.get(i).getDescricao());
            situacao.setValor(listaCielo.get(i).getValor());
            totalCielo+=situacao.getValor();
            listaSituacaoCielo.add(situacao);
        }
        
        
        for(int i=0;i<listaRedCard.size();i++){
            SituacaoFechamento situacao = new SituacaoFechamento();
            situacao.setDescricao(listaRedCard.get(i).getDescricao());
            situacao.setValor(listaRedCard.get(i).getValor());
            totalRedCard+=situacao.getValor();
            listaSituacaoRedCard.add(situacao);
        }
        totalCielojLabel.setText(Formatacao.foramtarFloatString(totalCielo));
        totalRedCardjLabel.setText(Formatacao.foramtarFloatString(totalRedCard));
        
    }

}
